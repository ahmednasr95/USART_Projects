
USART_Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000214  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000025f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ed4  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  000011bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000371  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e9  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Init    00000012  00000160  00000160  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Test_UART 00000028  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000000a  0000017e  0000017e  000001f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_Init 0000000c  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.USART_Set_Baudrate 0000004c  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.USART_RecieveCharacter 0000000a  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.USART_SendCharacter 00000026  00000124  00000124  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.libgcc.div 00000044  000000b8  000000b8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_fini 00000002  0000019a  0000019a  0000020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  0000019e  0000019e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000192 <__bad_interrupt>:
 192:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Init:

00000160 <Init>:
 *  Author: Ahmed ElSayed
 */ 
#include "TEST_UART_Interface.h"

void Init(){
	USART_Init();
 160:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Init>
	USART_Set_Baudrate(9600);
 164:	60 e8       	ldi	r22, 0x80	; 128
 166:	75 e2       	ldi	r23, 0x25	; 37
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>
 170:	08 95       	ret

Disassembly of section .text.Test_UART:

000000fc <Test_UART>:
}

void Test_UART(){
	UINT8_t x = 0;
	
	USART_SendCharacter('H');
  fc:	88 e4       	ldi	r24, 0x48	; 72
  fe:	0e 94 92 00 	call	0x124	; 0x124 <USART_SendCharacter>
	USART_SendCharacter('e');
 102:	85 e6       	ldi	r24, 0x65	; 101
 104:	0e 94 92 00 	call	0x124	; 0x124 <USART_SendCharacter>
	USART_SendCharacter('l');
 108:	8c e6       	ldi	r24, 0x6C	; 108
 10a:	0e 94 92 00 	call	0x124	; 0x124 <USART_SendCharacter>
	USART_SendCharacter('l');
 10e:	8c e6       	ldi	r24, 0x6C	; 108
 110:	0e 94 92 00 	call	0x124	; 0x124 <USART_SendCharacter>
	USART_SendCharacter('o');
 114:	8f e6       	ldi	r24, 0x6F	; 111
 116:	0e 94 92 00 	call	0x124	; 0x124 <USART_SendCharacter>
	
	x = USART_RecieveCharacter();
 11a:	0e 94 c4 00 	call	0x188	; 0x188 <USART_RecieveCharacter>
	USART_SendCharacter(x);
 11e:	0e 94 92 00 	call	0x124	; 0x124 <USART_SendCharacter>
 122:	08 95       	ret

Disassembly of section .text.main:

0000017e <main>:
 */ 
#include "TEST_UART_Interface.h"

int main(void)
{
	Init();
 17e:	0e 94 b0 00 	call	0x160	; 0x160 <Init>
	Test_UART();
 182:	0e 94 7e 00 	call	0xfc	; 0xfc <Test_UART>
 186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x8>

Disassembly of section .text.USART_Init:

00000172 <USART_Init>:
	#else
	#error
	#endif /*USART_MULTI_ECU_MODE*/
	
	/*Write to registers*/
	UCSRC = UCSRC_setting;
 172:	86 e8       	ldi	r24, 0x86	; 134
 174:	80 bd       	out	0x20, r24	; 32
	UCSRB = UCSRB_setting;
 176:	88 e1       	ldi	r24, 0x18	; 24
 178:	8a b9       	out	0x0a, r24	; 10
	UCSRA = UCSRA_setting;
 17a:	1b b8       	out	0x0b, r1	; 11
 17c:	08 95       	ret

Disassembly of section .text.USART_Set_Baudrate:

0000006c <USART_Set_Baudrate>:
	
	#if USART_MODE == USART_ASYNC
	
	#if USART_DDR_MODE == USART_DDR_DS
	
	reg_val = (F_CPU / (16 * baudrate)) - 1;
  6c:	dc 01       	movw	r26, r24
  6e:	cb 01       	movw	r24, r22
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	aa 1f       	adc	r26, r26
  76:	bb 1f       	adc	r27, r27
  78:	88 0f       	add	r24, r24
  7a:	99 1f       	adc	r25, r25
  7c:	aa 1f       	adc	r26, r26
  7e:	bb 1f       	adc	r27, r27
  80:	9c 01       	movw	r18, r24
  82:	ad 01       	movw	r20, r26
  84:	22 0f       	add	r18, r18
  86:	33 1f       	adc	r19, r19
  88:	44 1f       	adc	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	44 1f       	adc	r20, r20
  92:	55 1f       	adc	r21, r21
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	74 e2       	ldi	r23, 0x24	; 36
  98:	84 ef       	ldi	r24, 0xF4	; 244
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 5c 00 	call	0xb8	; 0xb8 <__udivmodsi4>
  a0:	da 01       	movw	r26, r20
  a2:	c9 01       	movw	r24, r18
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	a1 09       	sbc	r26, r1
  a8:	b1 09       	sbc	r27, r1
	
	reg_val = (F_CPU / (2 * baudrate)) - 1;
	
	#endif /*USART_MODE*/
	
	UBRRL = (UINT8_t)reg_val;
  aa:	89 b9       	out	0x09, r24	; 9
	UBRRH = (UINT8_t)(reg_val >> 8);
  ac:	89 2f       	mov	r24, r25
  ae:	9a 2f       	mov	r25, r26
  b0:	ab 2f       	mov	r26, r27
  b2:	bb 27       	eor	r27, r27
  b4:	80 bd       	out	0x20, r24	; 32
  b6:	08 95       	ret

Disassembly of section .text.USART_RecieveCharacter:

00000188 <USART_RecieveCharacter>:
}
 
UINT8_t USART_RecieveCharacter(){
	UINT8_t buffer = 0;
	
	while(!READ_BIT(UCSRA, UCSRA_RXC));
 188:	5f 9b       	sbis	0x0b, 7	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <USART_RecieveCharacter>
	
	return UDR;	 
 18c:	8c b1       	in	r24, 0x0c	; 12
 18e:	9d b1       	in	r25, 0x0d	; 13
}
 190:	08 95       	ret

Disassembly of section .text.USART_SendCharacter:

00000124 <USART_SendCharacter>:

void USART_SendCharacter(UINT8_t chr){
	UINT16_t timeout = 0;
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
	
	while(!READ_BIT(UCSRA, UCSRA_TXC) || timeout == 5000){
 128:	02 c0       	rjmp	.+4      	; 0x12e <USART_SendCharacter+0xa>
		timeout++;
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
}

void USART_SendCharacter(UINT8_t chr){
	UINT16_t timeout = 0;
	
	while(!READ_BIT(UCSRA, UCSRA_TXC) || timeout == 5000){
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	92 95       	swap	r25
 132:	96 95       	lsr	r25
 134:	96 95       	lsr	r25
 136:	93 70       	andi	r25, 0x03	; 3
 138:	c1 f3       	breq	.-16     	; 0x12a <USART_SendCharacter+0x6>
 13a:	28 38       	cpi	r18, 0x88	; 136
 13c:	93 e1       	ldi	r25, 0x13	; 19
 13e:	39 07       	cpc	r19, r25
 140:	a1 f3       	breq	.-24     	; 0x12a <USART_SendCharacter+0x6>
		timeout++;
	}
	
	UDR = chr;
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9d b9       	out	0x0d, r25	; 13
 146:	8c b9       	out	0x0c, r24	; 12
 148:	08 95       	ret

Disassembly of section .text.libgcc.div:

000000b8 <__udivmodsi4>:
  b8:	a1 e2       	ldi	r26, 0x21	; 33
  ba:	1a 2e       	mov	r1, r26
  bc:	aa 1b       	sub	r26, r26
  be:	bb 1b       	sub	r27, r27
  c0:	fd 01       	movw	r30, r26
  c2:	0d c0       	rjmp	.+26     	; 0xde <__udivmodsi4_ep>

000000c4 <__udivmodsi4_loop>:
  c4:	aa 1f       	adc	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	ee 1f       	adc	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	e4 07       	cpc	r30, r20
  d2:	f5 07       	cpc	r31, r21
  d4:	20 f0       	brcs	.+8      	; 0xde <__udivmodsi4_ep>
  d6:	a2 1b       	sub	r26, r18
  d8:	b3 0b       	sbc	r27, r19
  da:	e4 0b       	sbc	r30, r20
  dc:	f5 0b       	sbc	r31, r21

000000de <__udivmodsi4_ep>:
  de:	66 1f       	adc	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	88 1f       	adc	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	1a 94       	dec	r1
  e8:	69 f7       	brne	.-38     	; 0xc4 <__udivmodsi4_loop>
  ea:	60 95       	com	r22
  ec:	70 95       	com	r23
  ee:	80 95       	com	r24
  f0:	90 95       	com	r25
  f2:	9b 01       	movw	r18, r22
  f4:	ac 01       	movw	r20, r24
  f6:	bd 01       	movw	r22, r26
  f8:	cf 01       	movw	r24, r30
  fa:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000019a <_fini>:
 19a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000019c <__funcs_on_exit>:
 19c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000019e <__simulator_exit>:
 19e:	08 95       	ret

Disassembly of section .text.exit:

0000014a <exit>:
 14a:	ec 01       	movw	r28, r24
 14c:	0e 94 ce 00 	call	0x19c	; 0x19c <__funcs_on_exit>
 150:	0e 94 cd 00 	call	0x19a	; 0x19a <_fini>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 cf 00 	call	0x19e	; 0x19e <__simulator_exit>
 15a:	ce 01       	movw	r24, r28
 15c:	0e 94 cb 00 	call	0x196	; 0x196 <_Exit>

Disassembly of section .text._Exit:

00000196 <_Exit>:
 196:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
